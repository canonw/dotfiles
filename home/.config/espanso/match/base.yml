imports:
  - "./_aws.yml"
  - "./_docker.yml"
  - "./_ripgrep.yml"

matches:
  - trigger: ":espanso"
    label: 'Simple text replacement'
    replace: Hi there!
              
  # Dates
  - trigger: ":date"
    replace: "{{mydate}}"
    vars:
      - name: mydate
        type: date
        params:
          format: "%m/%d/%Y"

  - trigger: ":time"
    replace: "{{time}}"
    vars:
      - name: time
        type: date
        params:
          format: "%H:%M"

  - trigger: ":isodate"
    replace: "{{isodate}}"
    vars:
      - name: isodate
        type: date
        params:
          format: "%Y-%m-%dT%H:%M:%S%z"

  #####################
  # Random value     #
  # pip install Faker #
  #####################
  - triggers: [";r-date,", ";r-d,", "#r-,"]
    label: "Generate random date in YYYY-DD-MM format"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "from faker import Faker; fake = Faker(); print(fake.date())"

  - triggers: [";r-ip4,", "#r-,"]
    label: "Generate random ip v4 address"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "from faker import Faker; from faker.providers import internet; fake = Faker(); fake.add_provider(internet); print(fake.ipv4_private())"

  - triggers: [";r-name,", ";r-n,", "#r-,"]
    label: "Generate random name"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "from faker import Faker; fake = Faker(); print(fake.name())"

  - triggers: [";r-number,", ";r-i,", "#r-,"]
    label: "Generate random number"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "from faker import Faker; fake = Faker(); print(fake.random_int())"

  - triggers: [";r-sentence,", "#r-,"]
    label: "Generate random sentence"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "from faker import Faker; fake = Faker(); print(fake.sentence())"

  - triggers: [";r-ssn,", "#r-,"]
    label: "Generate random SSN"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "from faker import Faker; fake = Faker(); print(fake.ssn())"

  - triggers: [";r-uri,", "#r-,"]
    label: "Generate random URI"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "from faker import Faker; fake = Faker(); print(fake.uri())"

  - triggers: [";r-word,", ";r-w,", "#r-,"]
    label: "Generate random word"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "from faker import Faker; fake = Faker(); print(fake.word())"

  ####################
  # uuid generator   #
  # pip install uuid #
  ####################
  - triggers: [";uuid,", "#uuid,"]
    label: "Generate random uuid"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "import uuid; print(str(uuid.uuid4()))"

  # - trigger: ":uuid,"
  #   replace: "{{myuuid}}"
  #   vars:
  #     - name: myuuid
  #       type: shell
  #       params:
  #         cmd: "uuidgen | tr 'A-Z' 'a-z'"

  # TODO: Add triggers if available #
  - regex: ";uuid(?P<character>[a-fA-F0-9]{1}),"
    label: "Generate uuid value; replace first part using single character"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "import re; import uuid; tmp = str(uuid.uuid4()); print(re.sub(r\"[0-9A-Fa-f]\", \"{{character}}\".lower(), tmp[0:8]) + tmp[8:])" 

  # TODO: Add triggers if available #
  - regex: ";uuidr(?P<character>[a-fA-F0-9]{1}),"
    label: "Generate uuid value; replace last part using single character"
    replace: "{{output}}"
    vars:
      - name: output
        type: script
        params:
          args:
            - python3
            - -c
            - "import re; import uuid; tmp = str(uuid.uuid4()); print(tmp[0:23] + re.sub(r\"[0-9A-Fa-f]\", \"{{character}}\".lower(), tmp[23:]))" 

  # - trigger: ":uuid0,"
  #   replace: "{{myuuid}}"
  #   vars:
  #     - name: myuuid
  #       type: shell
  #       params:
  #         cmd: "uuidgen | sed s/[a-zA-Z0-9]/0/g"

  - trigger: ":shell"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: echo Hello from your shell

  - trigger: ":jwt"
    replace: 'pbpaste | jq -R ''split(".") | .[0],.[1] | @base64d | fromjson'''

  ###########
  #         #
  #  Docker #
  #         #
  ###########
  # Moved to dcoker.yml

  #
  #
  #   _____             _                _____
  #  |  __ \           | |              / ____|
  #  | |  | | ___   ___| | _____ _ __  | |     ___  _ __ ___  _ __   ___  ___  ___
  #  | |  | |/ _ \ / __| |/ / _ \ '__| | |    / _ \| '_ ` _ \| '_ \ / _ \/ __|/ _ \
  #  | |__| | (_) | (__|   <  __/ |    | |___| (_) | | | | | | |_) | (_) \__ \  __/
  #  |_____/ \___/ \___|_|\_\___|_|     \_____\___/|_| |_| |_| .__/ \___/|___/\___|
  #                                                          | |
  #                                                          |_|
  #
  # Docker Compose
  - trigger: ":dc-d,"
    replace: docker-compose down $|$
  - trigger: ":dc-ps,"
    replace: docker-compose ps $|$
  - trigger: ":dc-v,"
    replace: docker-compose version $|$
  - trigger: ":dc-u,"
    replace: docker-compose up --remove-orphans $|$
  - trigger: ":dc-uD,"
    replace: docker-compose up --detach $|$
  - trigger: ":dn-rg,"
    replace: 'reportgenerator "-reports:coverage/lcov.info" "-targetdir:coverage/reports" "-reporttypes:Html;HtmlSummary" $|$'
  - trigger: ":dn-t,"
    replace: "dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=..coverage/lcov.info $|$"
  - trigger: ":dn-wr,"
    replace: dotnet watch run --project $|$

  # - trigger: ":dn-wt,"
  #   replace: "dotnet watch test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=../coverage/lcov.info --project $|$"
  - trigger: ":dn-wt,"
    replace: |
      find . -name '*.sln' -maxdepth 1 -print -quit | xargs -I {} \
      dotnet watch test /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=../coverage/lcov.info \
      --project {} \
  - trigger: ":dn-wb,"
    replace: dotnet watch build --project $|$

  # https://docs.microsoft.com/en-us/ef/core/cli/dotnet
  # EF list migration
  - trigger: ":dn-ef-ml,"
    replace: dotnet ef migrations list $|$
  - trigger: ":dn-ef-ci,"
    replace: dotnet ef dbcontext info
  - trigger: ":dn-ef-cl,"
    replace: dotnet ef dbcontext list

  # DROP database and migration
  - trigger: ":dn-ef-DNM,"
    replace: dotnet ef database drop -f -v && dotnet ef database update

  - trigger: ":ip"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "curl 'https://api.ipify.org'"

  # pet script
  - trigger: ";pet,"
    replace: "[[snippets]]\n  description = \"$|$\"\n  command = \"{{clipboard}}\"\n  tag = [\"\"]\n  output = \"\"\n"
    vars:
      - name: clipboard
        type: clipboard

  # markdown
  - trigger: ";md-title,"
    replace: "---\ntitle: \"$|$\"\nkeywords:\n  - TBD\n\n...\n"
    vars:
      - name: clipboard
        type: clipboard

  ###################################
  # boxes                           #
  # https://boxes.thomasjensen.com/ #
  ###################################
  - triggers: [":boxes,", "#boxes,"]
    label: "Boxes around text"
    replace: "boxes -d shell -p h1l1"

  # - triggers: [":boxesP", "#boxes,"]
  #   label: "boxes around text as copy & paste"
  #   replace: "pbpaste | boxes -d shell -p h1l1"

  # Note: Shell performance is bad in Mac  
  - triggers: [";boxes,", "#boxes,"]
    label: "boxes around text as replacement"
    replace: "{{output}}"
    vars:
      - name: clipboard
        type: clipboard
      - name: output
        type: shell
        params:
          cmd: "{{clipboard}} | boxes -d shell -p h1l1"

  - triggers: [":boxes-r,", "#boxes,"]
    label: "Remove box around text"
    replace: "boxes -r"

  - triggers: [":boxes-c,", "#boxes,"]
    label: "Box with C, Java or C# comment"
    replace: "boxes -d c-cmt -i text"

  - triggers: [":boxes-h,", "#boxes,"]
    label: "Box with HTML comment"
    replace: "boxes -d html -i text"

  #
  #
  #                   _
  #                  | |
  #    ___ _   _ _ __| |
  #   / __| | | | '__| |
  #  | (__| |_| | |  | |
  #   \___|\__,_|_|  |_|
  #
  #
  #
  # curl
  - trigger: ":curl-Pon,"
    replace: "export http_proxy=localhost:8080;export https_proxy=localhost:8080"
  - trigger: ":curl-Poff,"
    replace: unset http_proxy; unset https_proxy

  # code
  - triggers: [":code$,", "#code,"]
    label: "code - open files"
    replace: "code ${$|$}"

  # xargs
  - triggers: [":x,", "#xargs,"]
    label: "xargs starter"
    replace: "| xargs -I {} $|$ {}"
  - triggers: [":x-sed,", "#xargs,"]
    label: "xargs with sample gnu sed"
    replace: "| xargs -I {} gsed -i -e 's/$|$/g' {}"

  # mongosh
  - triggers: [":mongosh-e,", "#mongosh,", "#complex,"]
    label: "Start mongosh with eval"
    replace: mongosh --quiet --norc --eval "db.version()$|$"

  # sed
  - triggers: [":sed-dw,", "#sed,", "#complex,"]
    label: "sed - Duplicate words"
    replace: "gsed -r 's|(.*)|\\1\\1|'"

  # complex commands
  - triggers: [":kill-port,", "#complex,"]
    label: "kill process attached to port 3000 (Mac)"
    replace: "lsof -t -i tcp:3000$|$ | xargs kill"

  - triggers: [":cat-file,", "#complex,"]
    label: "Snippet to generate cat file"
    replace:  |-
      cat <<EOF > file$|$
      EOF

  - triggers: [":buf-echo,", "#complex,"]
    label: "Echo words from buffer"
    replace:  |-
      pbpaste | while read OLD NEW; do\
        $|$echo "$OLD : $NEW" ;\
      done

  - triggers: [":buf-rg,", "#complex,"]
    label: "Replace words from column buffer"
    replace:  |-
      pbpaste | while read OLD NEW; do \
        echo "export _OLD=$OLD && export _NEW=$NEW && \
        rg \${_OLD} --hidden -l . \
        | xargs -I {} sh -c 'gsed -i -e \"s/\${_OLD}/\${_NEW}/g\" {}'" \
      ; done

  - triggers: [":one-liner,", "#complex,"]
    label: "Compact by stripping duplicate space and linefeed"
    replace: awk '{ printf "%s", $0 }' | awk '$1=$1'

  # TO DELETE below.
  - trigger: rrgs
    force_clipboard: true
    replace: "group_by($|$) %>%\n    summarise()\n"
  - trigger: ":greet"
    replace: |-
      Hey $0$, how are you?
      It's been a while!
    passive_only: true
  - trigger: ":reversed"
    replace: "Reversed {{myshell}}"
    vars:
      - name: mytime
        type: date
        params:
          format: "%H:%M"
      - name: myshell
        type: shell
        params:
          cmd: echo $ESPANSO_MYTIME | rev

  - trigger: ":file"
    replace: "{{form1.file}}"
    vars:
      - name: files
        type: shell
        params:
          cmd: "find ~/Documents -maxdepth 1"
      - name: form1
        type: form
        params:
          layout: |
            Select file:
            [[file]]
          fields:
            file:
              type: list
              values: "{{files}}"
