---
# git commands
# git-extras https://www.mankier.com/1/git-extras
matches:
  # Primary commands
  - triggers: [";g,", ";g?"]
    label: "git command"
    replace: git
  - triggers: [";gV,", ";g;v,", ";g?"]
    label: "git PROMPT version"
    replace: git --version
  - triggers: [";gH,", ";g;h,", ";g?"]
    label: "git PROMPT help"
    replace: git --help

  # git add
  - triggers: [';gA,', ';g;a,', ';g;a?', ';g?']
    label: git add
    replace: 'git add .$|$'
  - triggers: [';g;aH,', ';g;a?', ';g?']
    label: git add PROMPT help
    replace: 'git add -h$|$'
  - triggers: [';g;aI,', ';g;a?', ';g?']
    label: git add interactive
    replace: 'git add -i$|$'

  # git branch
  - triggers: [";g;b,", ";g;b?", ";g?"]
    label: "git branch"
    replace: git branch $|$
  - triggers: [";g;bH,", ";g;b?", ";g?"]
    label: "git branch PROMPT help"
    replace: git branch --help
  - triggers: [";g;b;l,", ";g;b;l?", ";g;b?", ";g?"]
    label: "git branch list local branches"
    replace: "git branch --list"
    # script friendly compared to 'git branch --list'
  - triggers: [";g;b;l.n,", ";g;b;l?", ";g;b?", ";g?"]
    label: "git branch list local branches with name only"
    replace: git for-each-ref --format='%(refname:short)' refs/heads/
  - triggers: [";g;b;r,", ";g;b;r?", ";g;b?", ";g?"]
    label: "git branch list remote branches"
    replace: git branch --remotes

  # git commit
  - triggers: [";g;c,", ";g;c?", ";g?"]
    label: "git commit"
    replace: "git commit -m '$|$'"
  - triggers: [";g;cH,", ";g;c?", ";g?"]
    label: "git commit PROMPT help"
    replace: git commit --help
  - triggers: [";g;c;a,", ";g;c?", ";g?"]
    label: "git commit amends staged commit without editing"
    replace: "git commit --amend$|$ --no-edit"

  # git clone
  - triggers: [";g;cl,", ";g;cl?", ";g?"]
    label: "git clone"
    replace: "git clone $|$"
  - triggers: [";g;clH,", ";g;cl?", ";g?"]
    label: "git clone PROMPT help"
    replace: "git clone --help$|$"

  # git cherry-pick
  - triggers: [";g;cp,", ";g;cp?", ";g?"]
    label: "git cherry-pick"
    replace: "git cherry-pick $|$"
  - triggers: [";g;cpH,", ";g;cp?", ";g?"]
    label: "git cherry-pick PROMPT help"
    replace: "git cherry-pick -h$|$"
  - triggers: [";g;cp;a,", ";g;cp?", ";g?"]
    label: "git cherry-pick abort"
    replace: "git cherry-pick --abort $|$"
  - triggers: [";g;cp;c,", ";g;cp?", ";g?"]
    label: "git cherry-pick continue"
    replace: "git cherry-pick --continue $|$"
  - triggers: [";g;cp;n,", ";g;cp?", ";g?"]
    label: "git cherry-pick without automatic commit"
    replace: "git cherry-pick --no-commit $|$"

  # git difftool
  - triggers: [";g;dt,", ";g;dt?", ";g?"]
    label: "git difftool"
    replace: git difftool
  - triggers: [";g;dtH,", ";g;dt?", ";g?"]
    label: "git difftool PROMPT help"
    replace: "git difftool -h$|$"
  - triggers: [";g;dt;d,", ";g;dt?", ";g?"]
    label: "git difftool directory diff"
    replace: git difftool --dir-diff HEAD~1$|$..HEAD &
  - triggers: [";g;dt;f,", ";g;dt?", ";g?"]
    label: "git diff file name only"
    replace: git difftool --name-only HEAD~1$|$..HEAD &

  # git log
  - triggers: [";g;l,", ";g;l?", ";g?"]
    label: "git log abbreviated"
    replace: "git log --abbrev-commit --oneline --show-linear-break -5$|$"
  - triggers: [";g;lH,", ";g;dt?", ";g?"]
    label: "git log PROMPT help"
    replace: "git log -h$|$"
  - triggers: [":g;l;t,", ";g;l?", ";g?"]
    label: "git - commit log as tree"
    replace: "git log --abbrev-commit --oneline --graph -5$|$"

  # git merge
  - triggers: [';g;mg,', ';g;mg?', ';g?']
    label: git merge
    replace: 'git merge $|$'
  - triggers: [';g;mgH,', ';g;mg?', ';g?']
    label: git merge PROMPT help
    replace: 'git merge -h$|$'
  - triggers: [';g;mg;c,', ';g;mg?', ';g?']
    label: git merge continue
    replace: 'git merge --continue$|$'
  - triggers: [';g;mg;a,', ';g;mg?', ';g?']
    label: git merge abort
    replace: 'git merge --abort$|$'

  # git mergetool
  - triggers: [';g;mt,', ';g;mt?', ';g?']
    label: git mergetool
    replace: 'git mergetool $|$'
  - triggers: [';g;mtH,', ';g;mt?', ';g?']
    label: git mergetool PROMPT help
    replace: 'git mergetool -h$|$'

  # git push
  - triggers: [";g;ph,", ";g;ph?", ";g?"]
    label: "git push"
    replace: git push origin -u$|$ `git branch --show-current`
  - triggers: [";g;phH,", ";g;ph?", ";g?"]
    label: "git push PROMPT help"
    replace: git push --help

  # git rebase
  - triggers: [";g;rb,", ";g;rb?", ";g?"]
    label: "git rebase"
    replace: git rebase
  - triggers: [";g;rbH,", ";g;rb?", ";g?"]
    label: "git rebase PROMPT help"
    replace: git rebase --help
  - triggers: [";g;rb;a,", ";g;rb?", ";g?"]
    label: "git rebase abort"
    replace: git rebase --abort
  - triggers: [";g;rb;c,", ";g;rb?", ";g?"]
    label: "git rebase continue"
    replace: git rebase --continue
  - triggers: [";g;rb;i,", ";g;rb?", ";g?"]
    label: "git rebase interactive"
    replace: git rebase --interactive HEAD~$|$

  # git reset
  - triggers: [";g;rs,", ";g;rs?", ";g?"]
    label: "git reset"
    replace: git reset $|$
  - triggers: [";g;rsH,", ";g;rs?", ";g?"]
    label: "git reset PROMPT help"
    replace: git reset --help $|$
  - triggers: [";g;rs;s,", ";g;rs?", ";g?"]
    label: "git reset soft"
    replace: git reset --soft HEAD$|$
  - triggers: [";g;rs;h,", ";g;rs?", ";g?"]
    label: "git reset hard"
    replace: git reset --hard HEAD$|$

  # git status
  - triggers: [";g;s,", ";g;s?", ";g?"]
    label: "git status"
    replace: "git status $|$"
  - triggers: [";g;sH,", ";g;s?", ";g?"]
    label: "git status PROMPT help"
    replace: "git status -h$|$"

  # git switch
  - triggers: [";g;sw,", ";g;sw?", ";g?"]
    label: "git switch"
    replace: git switch $|$
  - triggers: [";g;swH,", ";g;sw?", ";g?"]
    label: "git switch PROMPT help"
    replace: git switch --help
  - triggers: [";g;sw;f,", ";g;sw?", ";g?"]
    label: "git switch force create"
    replace: git switch --force-create $|$

  # Complex commands
  ## g.rt - root
  - triggers: [";g.rt,", ";g.?", ";g?"]
    label: "cd to top level of git repository directory"
    replace: cd $(git rev-parse --show-toplevel)

  ## g.fc - git files (committed)
  - triggers: [";g.fc;l,", ";g.fc?", ";g?"]
    label: "git files (committed) list"
    replace: git diff-tree --no-commit-id --name-only -r HEAD~$|$
  - triggers: [";g.fc;code,", ";g.fc?", ";g?", ";code?"]
    label: "open git files (committed) in Visual Studio Code"
    replace: code $(git diff --no-commit-id --name-only -r HEAD~$|$)

  ## g.fs - git files (staged)
  - triggers: [";g.fsL,", ";g.fs?", ";g?"]
    label: "git files (staged) list"
    replace: git diff --name-only --cached HEAD$|$
  - triggers: [";g.fs-l,", ";g.fs?", ";g?"]
    label: "git files (staged) list first file in staged"
    replace: "git diff --name-only --cached HEAD | sed -n '1$|$p'"
  - triggers: [";g.fsU,", ";g.fs?", ";g?"]
    label: "git files (staged) remove from staged to unstaged"
    replace: "git reset HEAD -- .$|$"
  - triggers: [";g.fs;u,", ";g.fs?", ";g?"]
    label: "git files (staged) remove first file from staged to unstaged"
    replace: "git reset HEAD -- $(git diff --name-only --cached HEAD | sed -n '1$|$p')"
  - triggers: [";g.fs;code,", ";g.fs?", ";g?", "#code,"]
    label: "open git files (staged) in Visual Studio Code"
    replace: code $(git diff --no-commit-id --name-only -r HEAD$|$)

  ## g.fu - git files (untracked)
  - triggers: [";g.fuL,", ";g.fu?", ";g?"]
    label: "git files (untracked) list"
    replace: git diff --name-only HEAD$|$
  - triggers: [";g.fu;l,", ";g.fu?", ";g?"]
    label: "git files (untracked) list first file"
    replace: "git diff --name-only HEAD | sed -n '1$|$p'"

  ## TODO: Fix below
  # git-extras commands
  - triggers: [":g-b-rv,", "#g-b,", "#g,"]
    label: "git extras to list branches sorted by their last commit date"
    replace: git brv
  - triggers: [":g-pr,", "#g-pr,", "#g,"]
    label: "git extras to check out a pull request locally"
    replace: git pr

  # Add later
  - trigger: ":g-a-P,"
    replace: git add --patch
